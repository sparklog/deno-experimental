## Project Purpose
This project is for testing various Deno Deploy features, including KV, log, and queue.

## Tech Stack
The project is based on SolidStart.
Use pnpm as the package manager for all dependency management and scripts.
The project is compiled for Deno deployment using Nitro.

## Folder Structure
src/
  api/
    database/
      index.ts      // Exports all database-related API functions, each function starts with "use server" as the first line
      action.ts     // (Optional) Exports database-related actions, each function starts with "use server" as the first line
    user/
      index.ts
      action.ts
    ...             // Other domain-specific API folders
    index.ts        // Explicitly imports and exports all APIs/actions from subfolders
  lib/
    types.ts        // All shared types
    supabase.ts     // Supabase client/config
    ...             // Other shared libraries

## API & Code Conventions
1. All reusable APIs are placed under src/api, grouped by domain.
2. Each API or action function must be exported.
3. "use server" must be the first line inside every exported async or Promise-returning function (not at the file top).
4. Example:
```typescript
export async function getUserById(id: string): Promise<User> {
  "use server";
  // ...implementation
}
```
5. In src/api/index.ts, use explicit imports and exports for every API/action function. Do not use wildcard exports.
6. Example:
```typescript
import { getUserById, listUsers } from './database/index';
import { createUserAction } from './database/action';
export { getUserById, listUsers, createUserAction };
```
7. Only APIs/actions exported from src/api/index.ts should be used elsewhere (e.g., in components or routes).

## Shared Libraries
1. Place all shared types in src/lib/types.ts.
2. Place shared utilities (e.g., Supabase client/config) in src/lib/supabase.ts.
3. Add documentation/comments in each shared file to clarify its purpose.

## Development Guidelines
1. Always use pnpm commands (e.g., pnpm install, pnpm run) for installing and managing dependencies.
2. Ensure code is compatible with both local development and Deno Deploy environments.
3. When adding features, prioritize testing Deno Deploy-specific capabilities (e.g., KV, log, queue).
4. Follow best practices for SolidStart and Deno projects.
5. Write clear, maintainable, and well-documented code.
6. Ensure all code changes are reviewed and tested before merging.

## Deployment
1. Use Nitro to build and compile the project for Deno.
2. Test deployment on Deno Deploy after every major change or feature addition.

## Documentation & Automation
1. Document any new features, especially those related to Deno Deploy (KV, log, queue).
2. Update this rules file if project conventions or workflows change.
3. Consider adding ESLint rules or custom scripts to enforce:
   - Placement of "use server" inside async/Promise-returning functions.
Explicit import/export patterns in src/api/index.ts.